{"version":3,"sources":["contexts/PreviewContext.js","components/Heading.js","components/Markdown.js","contexts/PreviewState.js","App.js","reportWebVitals.js","index.js"],"names":["previewContext","createContext","Heading","context","useContext","previewType","toggleType","className","Badge","variant","isMobile","onClick","console","log","SubHeading","colSize","inputStyle","width","height","margin","padding","previewStyle","backgroundColor","borderRadius","border","minHeight","overflowWrap","textAlign","useState","markdown","setMarkdown","htmlFor","bg","name","onChange","e","updateMarkdown","target","value","id","style","cols","rows","dangerouslySetInnerHTML","__html","marked","PreviewState","props","setPreviewType","setColSize","PreviewContext","Provider","children","App","Markdown","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAIeA,EAFQC,0B,cCkCRC,EA/BC,WACZ,IAAMC,EAAUC,qBAAWJ,GACpBK,EAA0BF,EAA1BE,YAAYC,EAAcH,EAAdG,WAOnB,OACI,sBAAKC,UAAU,YAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,6BACI,cAACC,EAAA,EAAD,CAAOD,UAAU,uCAAuCE,QAAQ,QAAhE,uCAMTC,YACH,qBAAKH,UAAU,mBAAf,SACI,yBAAQA,UAAU,kBAAkBI,QAlB5B,WAChBC,QAAQC,IAAIR,GACZC,KAgBQ,qBACaD,W,uBCwCdS,EA9DI,WACf,IACOC,EADSX,qBAAWJ,GACpBe,QAKDC,EAAa,CACfC,MAJyB,OAAZF,EAAkB,MAAM,MAKrCG,OAAQ,OACRC,OAAO,OACPC,QAAQ,QAGNC,EAAe,CACjBJ,MAVyB,OAAZF,EAAkB,MAAM,MAWrCI,OAAO,OACPC,QAAQ,SACRE,gBAAgB,UAChBC,aAAa,OACbC,OAAO,OACPC,UAAU,OACVC,aAAc,WACdC,UAAW,SAGf,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAUA,OACQ,sBAAKvB,UAAU,uBAAf,UACI,sBAAKA,UAAS,iBAAYQ,EAAZ,mBAAd,UACI,6BACI,uBAAOgB,QAAQ,QAAf,SACI,sBAAMxB,UAAU,qBAAqByB,GAAG,YAAxC,kCAGR,qBAAKzB,UAAU,aAAf,SACI,0BAAU0B,KAAK,OAAOC,SAbnB,SAACC,IAJD,SAACN,GACpBC,EAAYD,GAIZO,CAAeD,EAAEE,OAAOC,QAYwCA,MAAOT,EAAUtB,UAAU,QAAQgC,GAAG,QAAQC,MAAOxB,EAAYyB,KAAK,KAAKC,KAAK,YAIxI,sBAAKnC,UAAS,iBAAYQ,EAAZ,mBAAd,UACI,6BACI,sBAAMR,UAAU,qBAAqByB,GAAG,OAAxC,yBAEJ,qBAAKC,KAAK,UAAUM,GAAG,UAAUC,MAAOnB,EAAcsB,wBAAyB,CAACC,OAAOC,IAAOhB,aChCnGiB,EAvBM,SAACC,GAClB,MAAsCnB,mBAAS,YAA/C,mBAAOvB,EAAP,KAAoB2C,EAApB,KACA,EAA8BpB,mBAAS,KAAvC,mBAAOb,EAAP,KAAgBkC,EAAhB,KAcA,OACI,cAACC,EAAeC,SAAhB,CAAyBb,MAAO,CAAChC,WAZlB,WACI,iBAAhBD,GACC2C,EAAe,YACfC,EAAW,OAGXD,EAAe,gBACfC,EAAW,QAK6B5C,cAAYU,WAAxD,SACKgC,EAAMK,YCjBEC,E,4JACnB,WACE,OACE,mCACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAACC,EAAD,a,GANuBC,aCOlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d203e587.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst previewContext = createContext();\n\nexport default previewContext;","import React from 'react'\nimport { useContext } from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nimport previewContext from '../contexts/PreviewContext';\nimport { isMobile } from 'react-device-detect';\nconst Heading = () => {\n    const context = useContext(previewContext);\n    const {previewType,toggleType} = context;\n\n    const handleClick = ()=>{\n        console.log(previewType);\n        toggleType()\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row mt-4\">\n                <div className=\"col text-center\">\n                    <h1>\n                        <Badge className=\"text-align-center bg-light text-dark\" variant=\"light\">\n                            Markdown Previewer\n                        </Badge>\n                    </h1>\n                </div>\n            </div>\n            { !isMobile &&\n            <div className=\"my-4 text-center\">\n                <button className=\"btn btn-primary\" onClick={handleClick}>\n                    Preview {previewType}\n                </button>\n            </div>\n}   \n        </div>\n    )\n}\n\nexport default Heading\n","import React from 'react'\nimport { useState } from 'react'\nimport marked from 'marked';    \nimport previewContext from '../contexts/PreviewContext';\nimport { useContext } from 'react';\n\nconst SubHeading = () => {\n    const context = useContext(previewContext);\n    const {colSize} = context;\n\n    const inpWidth = colSize === '12' ?\"60%\":\"90%\";\n    const preWidth = colSize === '12' ?\"75%\":\"90%\";\n\n    const inputStyle = {\n        width: inpWidth,\n        height: \"60vh\",\n        margin:\"auto\",\n        padding:\"10px\"\n    }\n\n    const previewStyle = {\n        width: preWidth,\n        margin:\"auto\",\n        padding:\"1.3rem\",\n        backgroundColor:\"#DCDCDC\",\n        borderRadius:\"20px\",\n        border:\"none\",\n        minHeight:\"60vh\",\n        overflowWrap: \"anywhere\",\n        textAlign: \"start\",\n    }\n\n    const [markdown, setMarkdown] = useState('');\n\n    const updateMarkdown = (markdown)=>{\n        setMarkdown(markdown);\n    }\n\n    const handleOnChange = (e)=>{\n        updateMarkdown(e.target.value);\n    }\n\n    return (\n            <div className=\"row mt-4 text-center\">\n                <div className={`col-md-${colSize} my-3 col-sm-10`}>\n                    <h2>\n                        <label htmlFor=\"input\">\n                            <span className=\"badge bg-secondary\" bg=\"secondary\"> Markdown Input </span>\n                        </label>\n                    </h2>\n                    <div className=\"mark-input\">\n                        <textarea name=\"area\" onChange={handleOnChange} value={markdown} className=\"input\" id=\"input\" style={inputStyle} cols=\"30\" rows=\"10\"></textarea>\n\n                    </div>\n                </div>\n                <div className={`col-md-${colSize} my-3 col-sm-10`}>\n                    <h2>\n                        <span className=\"badge bg-secondary\" bg=\"dark\"> Preview </span>\n                    </h2>\n                    <div name=\"preview\" id=\"preview\" style={previewStyle} dangerouslySetInnerHTML={{__html:marked(markdown)}} >\n                    </div>\n\n                </div>\n            </div>\n\n    )\n}\n\nexport default SubHeading\n","import { useState } from \"react\";\nimport React from \"react\";\nimport PreviewContext from \"./PreviewContext\";\n\nconst PreviewState = (props) => {\n    const [previewType, setPreviewType] = useState('seperate')\n    const [colSize, setColSize] = useState('6')\n\n\n    const toggleType = ()=>{\n        if(previewType === \"side by side\"){\n            setPreviewType(\"seperate\");\n            setColSize('6')\n        }\n        else{\n            setPreviewType(\"side by side\");\n            setColSize('12')\n        }\n    }\n\n    return (\n        <PreviewContext.Provider value={{toggleType,previewType,colSize}}>\n            {props.children}\n        </PreviewContext.Provider>\n    )\n}\n\nexport default PreviewState\n","import React, { Component } from 'react'\nimport Heading from './components/Heading';\nimport Markdown from './components/Markdown';\nimport PreviewState from './contexts/PreviewState';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <>\n        <PreviewState>\n          <Heading />\n          <Markdown />\n        </PreviewState>\n      </>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}